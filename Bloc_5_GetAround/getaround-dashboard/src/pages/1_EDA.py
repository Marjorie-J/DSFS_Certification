import plotly.express as px
import streamlit as st

st.set_page_config(page_title="GetAround Web Dashboard üöó", layout="wide")

from utils.common import data_getaround

st.markdown("# EDA üìà")

st.markdown("""
Bienvenue dans la section EDA ! 
            
Dans cette section, nous explorons les donn√©es de la plateforme GetAround, un service de location de voitures entre particuliers.

Vous y trouverez des visualisations et des statistiques comme notamment :
            
La r√©partition des informations qui ont servi √† l'analyse ou l'√©tude des retards

Ces analyses permettent de mieux comprendre les donn√©es afin d'am√©liorer les d√©cisions m√©tier.
""")

st.divider()

## Distribution des variables
st.subheader("Visualisation des donn√©es üìà")

## Run the below code if the check is checked ‚úÖ
if st.checkbox("Visualiser les donn√©es qui ont permis cette analyse"):
    st.write(data_getaround)  

# checkin_type
df_counts = data_getaround["checkin_type"].value_counts().reset_index()
df_counts.columns = ["checkin_type", "count"]

fig = px.bar(df_counts, x="checkin_type", y="count", 
             color="checkin_type", title="Types de checkin", color_discrete_sequence=px.colors.qualitative.Pastel)
fig.update_layout(xaxis_title=None, yaxis_title=None, yaxis=dict(tickformat='d'), showlegend=False, title_x=0.5)
st.plotly_chart(fig, use_container_width=True)


# delay_at_checkout_in_minutes
fig = px.histogram(data_getaround, x="delay_at_checkout_in_minutes", 
                   title="R√©partition du d√©lai de restitutuion d'un v√©hicule, en minutes.", color_discrete_sequence=px.colors.qualitative.Pastel)
fig.update_layout(xaxis_title=None, yaxis_title=None, yaxis=dict(tickformat='d'))
st.plotly_chart(fig, use_container_width=True)

st.markdown("Une valeur n√©gative signifie que le conducteur a restitu√© le v√©hicule en avance.")

# state
df_counts = data_getaround["state"].value_counts().reset_index()
df_counts.columns = ["state", "count"]

fig = px.bar(df_counts, x="state", y="count", 
             color="state", title=f"Etat des locations", color_discrete_sequence=px.colors.qualitative.Pastel)
fig.update_layout(xaxis_title=None, yaxis_title=None, yaxis=dict(tickformat='d'), showlegend=False, title_x=0.5)
st.plotly_chart(fig, use_container_width=True)


# time_delta_with_previous_rental_in_minutes
fig = px.histogram(data_getaround, x="time_delta_with_previous_rental_in_minutes", 
                   title="R√©partition de l'√©cart entre le d√©but d'une location et la fin de la pr√©c√©dente, en minutes.", nbins=35, 
                   color_discrete_sequence=px.colors.qualitative.Pastel)
fig.update_layout(xaxis_title=None, yaxis_title=None, yaxis=dict(tickformat='d'))
st.plotly_chart(fig, use_container_width=True)


st.divider()


## Locations pr√©c√©dentes
st.subheader("Locations pour lesquelles nous avons les informations des locations pr√©c√©dentes")

has_prev = data_getaround['previous_ended_rental_id'].notna()
values = [has_prev.sum(), len(data_getaround) - has_prev.sum()]

fig = px.pie(names=['Avec location pr√©c√©dente', 'Sans location pr√©c√©dente'], values=values, color_discrete_sequence=px.colors.qualitative.Pastel)
st.plotly_chart(fig)

percent_prec = has_prev.sum() * 100 / data_getaround.shape[0]

st.markdown(
    f"""
    **Cela repr√©sente :** {percent_prec:.2f}% des donn√©es. Ces cas sont int√©ressants √† analyser, ce que nous allons faire.  

    ‚ö†Ô∏è *Mais cela reste trop peu pour tirer nos conclusions uniquement sur cet √©chantillon.*
    """
)
